@startuml ETL Framework - Code-Based Design (Comprehensive)

' --- スタイル定義 ---
skinparam classAttributeIconSize 0
skinparam defaultFontName "Segoe UI", "Helvetica", "Arial"
skinparam package {
    BackgroundColor LightBlue
    BorderColor RoyalBlue
}
skinparam class {
    BackgroundColor LightYellow
    ArrowColor Navy
    BorderColor Navy
}
skinparam interface {
    BackgroundColor LightPink
    BorderColor Firebrick
}
skinparam enum {
    BackgroundColor LightGreen
}
skinparam abstract {
    BackgroundColor LemonChiffon
}

' #############################################
' ###      ETL FLOW DEFINITION FILE         ###
' #############################################
class "ETL Flow\n(e.g., ETL1/etl_flow.py)" as EtlFlowScript


' #############################################
' ###           CORE FRAMEWORK              ###
' #############################################
package "scripts.core" {

    package "orchestrator" {
        class "run_pipeline_as_task" as TaskRunner <<@task function>>
    }

    package "pipeline" {
        class PipelineBuilder
        class StepExecutor
        class DependencyResolver
    }

    package "plugin_manager" {
        class PluginManager
        class "PluginRegistry (singleton)" as PluginRegistry
        interface PluginInterface
        interface ExtractorInterface
        interface CleanserInterface
        interface TransformerInterface
        interface ValidatorInterface
        interface LoaderInterface
    }

    package "data_container" {
        class DataContainer
        enum SupportedFormats
    }

    package "config" {
        class ConfigLoader
        class ConfigValidator
    }
}


' #############################################
' ###              PLUGINS                  ###
' #############################################
package "scripts.plugins" {

    package "extractors" {
        abstract class BaseExtractor
        class LocalFileExtractor
        class LocalJsonExtractor
        class HttpExtractor
        class FtpExtractor
        class ScpExtractor
        class DatabaseExtractor
    }

    package "cleansing" {
        abstract class BaseCleanser
        class ArchiveExtractor
        class EncodingConverter
        class FormatDetector
        class DuplicateRemover
        class NullHandler
    }

    package "transformers" {
        abstract class BaseTransformer
        class DuckDBTransformer
        class Jinja2Transformer
        class ToNxsiTransformer
        class CsvProcessor
        class JsonProcessor
        class GtfsProcessor
        class ShapefileProcessor
        ' ★★★ [修正点 1] DataFrameJoinerクラスを追加 ★★★
        class DataFrameJoiner
    }

    package "validators" {
        abstract class BaseValidator
        class JsonSchemaValidator
        class DataQualityValidator
        class NgsiValidator
        class BusinessRulesValidator
    }

    package "loaders" {
        abstract class BaseLoader
        class LocalFileLoader
        class HttpLoader
        class FtpLoader
        class ScpLoader
        class ContextBrokerLoader
        class DatabaseLoader
    }
}


' #############################################
' ###             UTILITIES                 ###
' #############################################
package "scripts.utils" {
    class "config_loader" as ConfigLoaderUtil <<utility>>
    class "sql_template" as SqlTemplateUtil <<utility>>
    class "file_utils" as FileUtilsUtil <<utility>>
    class "logger" as LoggerUtil <<utility>>
}


' #############################################
' ###            RELATIONSHIPS              ###
' #############################################

' --- Main Control Flow ---
EtlFlowScript ..> PipelineBuilder : creates & configures
EtlFlowScript ..> TaskRunner : calls

TaskRunner ..> PipelineBuilder : calls run()

PipelineBuilder o-- StepExecutor
StepExecutor o-- PluginManager

' --- Core Dependencies ---
StepExecutor ..> PluginInterface : calls execute()
StepExecutor ..> DataContainer : passes between steps
PluginManager ..> PluginRegistry : uses
PluginManager ..> PluginInterface : creates
' PipelineParser ..> FileUtilsUtil : (if used) ' PipelineParserは削除されたのでコメントアウト
StepExecutor ..> FileUtilsUtil : (can use) ' ★★★ [修正点 2] StepExecutorがFileUtilsUtilを利用する可能性を追加 ★★★


' --- Interface Inheritance ---
PluginInterface <|-- ExtractorInterface
PluginInterface <|-- CleanserInterface
PluginInterface <|-- TransformerInterface
PluginInterface <|-- ValidatorInterface
PluginInterface <|-- LoaderInterface

' --- Base Class Inheritance ---
ExtractorInterface <|-- BaseExtractor
CleanserInterface <|-- BaseCleanser
TransformerInterface <|-- BaseTransformer
ValidatorInterface <|-- BaseValidator
LoaderInterface <|-- BaseLoader

' --- Concrete Plugin Inheritance (All plugins inherit from a Base class) ---
BaseExtractor <|-- LocalFileExtractor
BaseExtractor <|-- LocalJsonExtractor
BaseExtractor <|-- HttpExtractor
BaseExtractor <|-- FtpExtractor
BaseExtractor <|-- ScpExtractor
BaseExtractor <|-- DatabaseExtractor

BaseCleanser <|-- ArchiveExtractor
BaseCleanser <|-- EncodingConverter
BaseCleanser <|-- FormatDetector
BaseCleanser <|-- DuplicateRemover
BaseCleanser <|-- NullHandler

BaseTransformer <|-- DuckDBTransformer
BaseTransformer <|-- Jinja2Transformer
BaseTransformer <|-- ToNxsiTransformer
BaseTransformer <|-- CsvProcessor
BaseTransformer <|-- JsonProcessor
BaseTransformer <|-- GtfsProcessor
BaseTransformer <|-- ShapefileProcessor
' ★★★ [修正点 3] DataFrameJoinerの継承関係を追加 ★★★
BaseTransformer <|-- DataFrameJoiner

BaseValidator <|-- JsonSchemaValidator
BaseValidator <|-- DataQualityValidator
BaseValidator <|-- NgsiValidator
BaseValidator <|-- BusinessRulesValidator

BaseLoader <|-- LocalFileLoader
BaseLoader <|-- HttpLoader
BaseLoader <|-- FtpLoader
BaseLoader <|-- ScpLoader
BaseLoader <|-- ContextBrokerLoader
BaseLoader <|-- DatabaseLoader

' --- Utility and Core Component Usage by Plugins (Examples) ---
DuckDBTransformer ..> SqlTemplateUtil : uses to render query
DatabaseExtractor ..> SqlTemplateUtil : uses to render query
JsonSchemaValidator ..> ConfigLoaderUtil : uses to load schema
HttpExtractor ..> DataContainer : creates
ToLocalFileLoader ..> DataContainer : receives
EncodingConverter ..> SupportedFormats : uses
' ★★★ [修正点 4] DataFrameJoinerの関係性を追加 ★★★
DataFrameJoiner ..> DataContainer : receives multiple, returns one

' --- General Dependencies ---
EtlFlowScript ..> LoggerUtil : uses for logging
PluginInterface ..> LoggerUtil : (all plugins can use)
ConfigValidator ..> "pydantic.BaseModel" : (external)

@enduml