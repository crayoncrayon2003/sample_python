{# ETL1/04_templates/report.html.j2 #}
{#
  This Jinja2 template generates a simple HTML report from a DataFrame.
  The Jinja2Transformer makes each row of the DataFrame available as a
  dictionary inside the template. Since we want a summary report based on
  the entire DataFrame, this example assumes the transformer has been
  modified or configured to pass the whole DataFrame's `to_dict('records')`
  list as a single variable, e.g., `rows`.

  Alternatively, for a simpler plugin, we can just process the first row
  if we only need summary statistics that have been pre-calculated.
  Let's assume the input DataFrame has summary columns.
#}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sales Data Processing Report</title>
    <style>
        body { font-family: sans-serif; margin: 2em; }
        h1, h2 { color: #333; }
        table { border-collapse: collapse; width: 100%; margin-top: 1em; }
        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
        th { background-color: #f2f2f2; }
        .summary { background-color: #eef; padding: 1em; border-radius: 5px; }
    </style>
</head>
<body>
    <h1>Sales Data Processing Report</h1>
    
    {#
      To create a summary, we would ideally pre-aggregate the data in a
      previous DuckDB step into a single-row DataFrame.
      Let's assume the input DataFrame to this template step looks like:
      
      | total_rows | total_quantity | average_price | last_processed_timestamp |
      |------------|----------------|---------------|--------------------------|
      | 150        | 750            | 99.50         | 2025-08-04 10:30:00      |
    #}

    <div class="summary">
        <h2>Summary</h2>
        <p>This report was generated on: <strong>{{ processing_timestamp | default(now('utc').isoformat()) }}</strong>.</p>
        
        {# We access the columns of the DataFrame row passed into the template. #}
        <p>Total records processed: <strong>{{ total_rows | default('N/A') }}</strong></p>
        <p>Total quantity sold: <strong>{{ total_quantity | default('N/A') }}</strong></p>
        <p>Average price: <strong>${{ "%.2f" | format(average_price | default(0)) }}</strong></p>
    </div>

    <h2>Sample of Processed Data</h2>
    {#
      To show a table of data, the input DataFrame should contain the raw rows.
      Jinja2Transformer iterates row by row, which is not ideal for this kind of
      report. A better approach would be a custom "DataFrame to HTML" plugin.

      Let's simulate it by assuming a variable `data_rows` (list of dicts) is passed.
    #}
    <table>
        <thead>
            <tr>
                <th>Product ID</th>
                <th>Price</th>
                <th>Quantity</th>
                <th>Processing Timestamp</th>
            </tr>
        </thead>
        <tbody>
            {% for row in data_rows %}
            <tr>
                <td>{{ row.product_id }}</td>
                <td>{{ row.price }}</td>
                <td>{{ row.quantity }}</td>
                <td>{{ row.processing_timestamp }}</td>
            </tr>
            {% else %}
            <tr>
                <td colspan="4">No data available.</td>
            </tr>
            {% endfor %}
        </tbody>
    </table>

</body>
</html>