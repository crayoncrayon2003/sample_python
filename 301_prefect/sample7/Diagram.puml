@startuml ETL Framework - Final Design (Compatibility Mode)

' --- スタイル定義 (基本的なもののみ) ---
skinparam classAttributeIconSize 0
skinparam package {
    BackgroundColor LightBlue
    BorderColor RoyalBlue
}
skinparam class {
    BackgroundColor LightYellow
    ArrowColor Navy
    BorderColor Navy
}
skinparam enum {
    BackgroundColor LightGreen
}

' #############################################
' ###      ETL FLOW DEFINITION FILE         ###
' #############################################
package "ETL Definition" {
    class "etl_flow.py" as EtlFlowScript
}


' #############################################
' ###           CORE FRAMEWORK              ###
' #############################################
package "scripts.core" {
    package "pipeline" {
        class StepExecutor
        class DependencyResolver
    }
    package "plugin_manager" {
        class FrameworkManager as "FrameworkManager (singleton)"
        class EtlHookSpecs <<HookSpec>>
    }
    package "data_container" {
        class DataContainer
        enum SupportedFormats
    }
    package "config" {
        class ConfigLoader
        class ConfigValidator
    }
}


' #############################################
' ###              PLUGINS                  ###
' #############################################
package "scripts.plugins" {
    package "extractors" {
        class LocalFileExtractor
        class LocalJsonExtractor
        class HttpExtractor
        class FtpExtractor
        class ScpExtractor
        class DatabaseExtractor
    }
    package "cleansing" {
        class ArchiveExtractor
        class EncodingConverter
        class FormatDetector
        class DuplicateRemover
        class NullHandler
    }
    package "transformers" {
        class DuckDBTransformer
        class Jinja2Transformer
        class ToNxsiTransformer
        class CsvProcessor
        class JsonProcessor
        class GtfsProcessor
        class ShapefileProcessor
        class DataFrameJoiner
    }
    package "validators" {
        class JsonSchemaValidator
        class DataQualityValidator
        class NgsiValidator
        class BusinessRulesValidator
    }
    package "loaders" {
        class LocalFileLoader
        class HttpLoader
        class FtpLoader
        class ScpLoader
        class ContextBrokerLoader
        class DatabaseLoader
    }
}


' #############################################
' ###             UTILITIES                 ###
' #############################################
package "scripts.utils" {
    class "config_loader" as ConfigLoaderUtil <<utility>>
    class "sql_template" as SqlTemplateUtil <<utility>>
    class "file_utils" as FileUtilsUtil <<utility>>
    class "logger" as LoggerUtil <<utility>>
}


' #############################################
' ###            RELATIONSHIPS              ###
' #############################################

' --- Main Control Flow & Dependencies ---
EtlFlowScript ..> StepExecutor : uses
EtlFlowScript ..> ConfigLoader : uses
EtlFlowScript ..> LoggerUtil : uses

StepExecutor ..> FrameworkManager : uses
FrameworkManager ..> EtlHookSpecs : uses for spec
FrameworkManager ..> "Plugin Classes" : discovers & instantiates

' --- Plugin Implementation (All plugins implement hooks) ---
' (代表例のみを線で結び、図の可読性を保ちます)
LocalFileExtractor ..|> EtlHookSpecs : implements
DuplicateRemover ..|> EtlHookSpecs : implements
DuckDBTransformer ..|> EtlHookSpecs : implements
DataQualityValidator ..|> EtlHookSpecs : implements
LocalFileLoader ..|> EtlHookSpecs : implements

' --- Data Flow ---
StepExecutor ..> DataContainer : receives & returns

' --- Utility Usage Examples ---
DuckDBTransformer ..> SqlTemplateUtil
JsonSchemaValidator ..> ConfigLoaderUtil

@enduml